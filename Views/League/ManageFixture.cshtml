@* Path: Views/League/ManageFixture.cshtml *@
@model BussinessCupApi.ViewModels.ManageFixtureViewModel
@using BussinessCupApi.Models

@{
    ViewData["Title"] = $"Fikstür Yönetimi - {Model.LeagueName}";
    if (User.IsInRole("Admin"))
    {
        Layout = "_AdminLayout";
    }
    else if (User.IsInRole("CityAdmin"))
    {
        Layout = "_CityAdminLayout";
    }
}
@{
    var dashboardController = User.IsInRole("Admin") ? "Admin"
                          : User.IsInRole("CityAdmin") ? "CityAdmin"
                          : null;
}


<div class="bg-gray-800 rounded-lg p-6">
    <h2 class="text-2xl font-semibold text-white mb-6">@ViewData["Title"]</h2>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-700 border border-green-600 text-green-100 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Başarılı!</strong>
            <span class="block sm:inline">@TempData["SuccessMessage"]</span>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-700 border border-red-600 text-red-100 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Hata!</strong>
            <span class="block sm:inline">@TempData["ErrorMessage"]</span>
        </div>
    }


    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div class="md:col-span-2">
            <section class="bg-gray-700 p-4 rounded-md mb-6">
                <h4 class="text-xl font-medium text-white mb-3">Lig Bilgileri</h4>
                <dl class="space-y-2">
                    <div class="flex">
                        <dt class="w-1/3 text-gray-400 font-medium">Lig Adı:</dt>
                        <dd class="w-2/3 text-gray-200">@Model.LeagueName</dd>
                    </div>
                    <div class="flex">
                        <dt class="w-1/3 text-gray-400 font-medium">Lig Tipi:</dt>
                        <dd class="w-2/3 text-gray-200">@Model.LeagueType.ToString()</dd>
                    </div>
                    <div class="flex">
                        <dt class="w-1/3 text-gray-400 font-medium">Başlangıç Tarihi:</dt>
                        <dd class="w-2/3 text-gray-200">@Model.LeagueStartDate.ToShortDateString()</dd>
                    </div>
                    <div class="flex">
                        <dt class="w-1/3 text-gray-400 font-medium">Bitiş Tarihi:</dt>
                        <dd class="w-2/3 text-gray-200">@Model.LeagueEndDate.ToShortDateString()</dd>
                    </div>
                    <div class="flex">
                        <dt class="w-1/3 text-gray-400 font-medium">Şehirdeki Takım Sayısı:</dt>
                        <dd class="w-2/3 text-gray-200">@Model.Teams.Count</dd>
                    </div>
                    <div class="flex">
                        <dt class="w-1/3 text-gray-400 font-medium">Kadro Genişliği:</dt>
                        <dd class="w-2/3 text-gray-200">@Model.TeamSquadCount oyuncu</dd>
                    </div>
                </dl>
            </section>

            @if (Model.IsFixtureGenerated)
            {
                <section class="bg-gray-700 p-4 rounded-md mb-6">
                    <h4 class="text-xl font-medium text-white mb-3">Mevcut Fikstür Bilgileri</h4>
                    <div class="bg-blue-900 border border-blue-700 text-blue-200 px-4 py-3 rounded relative mb-4" role="alert">
                        <strong class="font-bold">Bilgi:</strong>
                        <span class="block sm:inline">Bu lig için bir sezon ve fikstür daha önce oluşturulmuş olabilir. Yeni bir sezon ve fikstür oluşturmak, önceki verileri silmez ancak yeni kayıtlar ekler.</span>
                    </div>

                    @if (Model.ExistingGroups.Any())
                    {
                        <h5 class="text-lg font-medium text-white mt-4 mb-2">Tanımlı Gruplar (Varsa)</h5>
                        <ul class="list-disc list-inside text-gray-300 space-y-1">
                            @foreach (var group in Model.ExistingGroups)
                            {
                                <li>@group.GroupName (@group.Description)</li>
                            }
                        </ul>
                    }

                    @if (Model.ExistingWeeks.Any())
                    {
                        <h5 class="text-lg font-medium text-white mt-4 mb-2">Tanımlı Haftalar (Varsa)</h5>
                        <p class="text-gray-300 mb-2">Toplam @Model.ExistingWeeks.Count hafta mevcut.</p>
                        @* <ul class="list-disc list-inside text-gray-300 space-y-1">
                @foreach (var week in Model.ExistingWeeks.OrderBy(w => w.WeekNumber))
                {
                <li>@week.WeekName (Hafta @week.WeekNumber) - @week.StartDate.ToShortDateString() - @week.EndDate.ToShortDateString()</li>
                }
                </ul> *@
                    }
                </section>
            }

            <section class="bg-gray-700 p-4 rounded-md">
                <h4 class="text-xl font-medium text-white mb-4">Yeni Sezon ve Fikstür Oluştur</h4>
                @if (Model.Teams.Count < 2)
                {
                    <div class="bg-yellow-900 border border-yellow-700 text-yellow-200 px-4 py-3 rounded relative" role="alert">
                        <strong class="font-bold">Uyarı:</strong>
                        <span class="block sm:inline">Fikstür oluşturmak için ligin bulunduğu şehirde en az 2 takım olmalıdır.</span>
                    </div>
                }
                else
                {
                    <form asp-action="GenerateFixture" asp-controller="League" method="post" class="space-y-6">
                        <div asp-validation-summary="ModelOnly" class="text-red-400 text-sm"></div>
                        <input type="hidden" name="LeagueId" value="@Model.LeagueId" />

                        <div>
                            <label for="SeasonName" class="block text-gray-300 mb-1 font-medium">Sezon Adı</label>
                            <input type="text" id="SeasonName" name="SeasonName" required class="w-full bg-gray-600 text-white rounded px-3 py-2 border border-gray-500 focus:border-blue-500 focus:ring-blue-500" placeholder="Örn: 2024-2025 Sezonu" />
                            @Html.ValidationMessage("SeasonName", new { @class = "text-red-400 text-sm mt-1" })
                        </div>

                        <div>
                            <h5 class="text-lg font-medium text-white mb-2">Fikstüre Dahil Edilecek Takımlar (<span id="selectedTeamCountInfoText"><span id="selectedTeamCount">0</span> takım seçili</span>)</h5>
                            <p class="text-gray-400 text-sm mb-3">Aşağıdaki takımlardan en az 2 tanesini seçin.</p>
                            <div class="mb-3">
                                <label for="teamSearchInput" class="sr-only">Takım Ara</label>
                                <input type="text" id="teamSearchInput" class="w-full bg-gray-600 text-white rounded px-3 py-2 border border-gray-500 focus:border-blue-500 focus:ring-blue-500" placeholder="Takım adıyla filtrele...">
                            </div>
                            <div id="teamListContainer" class="max-h-60 overflow-y-auto space-y-2 border border-gray-600 p-3 rounded-md">
                                @if (Model.Teams.Any())
                                {
                                    for (int i = 0; i < Model.Teams.Count; i++)
                                    {
                                        var team = Model.Teams[i];
                                        <div class="team-item flex items-center">
                                            <input type="checkbox" id="team_@team.TeamID" name="SelectedTeamIds" value="@team.TeamID" class="team-checkbox h-4 w-4 bg-gray-600 border-gray-500 rounded text-blue-600 focus:ring-blue-500">
                                            <label for="team_@team.TeamID" class="ml-2 text-gray-200 team-name">@team.Name</label>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-gray-400">Bu şehirde hiç takım bulunamadı.</p>
                                }
                            </div>
                            @Html.ValidationMessage("SelectedTeamIds", new { @class = "text-red-400 text-sm mt-1" })
                        </div>


                        @if (Model.LeagueType == LeagueType.GroupLeagueThenKnockout) // Lig ve Grup tipleri için grup sayısı
                        {
                            <div>
                                <label for="NumberOfGroups" class="block text-gray-300 mb-1 font-medium">Grup Sayısı</label>
                                <input type="number" id="NumberOfGroups" name="NumberOfGroups" min="0" value="0" class="w-full bg-gray-600 text-white rounded px-3 py-2 border border-gray-500 focus:border-blue-500 focus:ring-blue-500" />
                                <span asp-validation-for="NumberOfGroups" class="text-red-400 text-sm mt-1"></span>
                                <p id="groupTeamValidationMessage" class="text-red-400 text-sm mt-1" style="display:none;"></p>
                                <small class="text-gray-400 text-xs mt-1 block">Lig tipi gruplamaya uygunsa ve > 0 ise, takımlar gruplara ayrılır. 0 veya 1 ise grupsuz lig/tek grup olarak kabul edilir.</small>
                            </div>
                        }
                        else
                        {
                            <input type="hidden" name="NumberOfGroups" value="0" />
                        }

                        @if (Model.LeagueType == LeagueType.League || Model.LeagueType == LeagueType.LeagueThenKnockout || Model.LeagueType == LeagueType.GroupLeagueThenKnockout)
                        {
                            <div class="flex items-center">
                                <input type="checkbox" id="PlayReturnMatches" name="PlayReturnMatches" value="true" checked class="h-4 w-4 bg-gray-600 border-gray-500 rounded text-blue-600 focus:ring-blue-500" />
                                <label for="PlayReturnMatches" class="ml-2 block text-sm text-gray-300 font-medium">Maçlar Rövanşlı Oynansın</label>
                            </div>
                            <input type="hidden" name="PlayReturnMatches" value="false" /> @* Checkbox işaretlenmezse false gitmesi için *@
                            <small class="text-gray-400 text-xs -mt-1 mb-1 block">İşaretli ise, her takım birbiriyle iki maç (iç saha/deplasman) yapar. İşaretsiz ise tek maç yapılır.</small>
                        }
                        else
                        {
                            <input type="hidden" name="PlayReturnMatches" value="false" />
                        }

                        @* AutoGenerateWeeks kaldırıldı, çünkü haftalar artık backend'de dinamik olarak lig başlangıç tarihine göre oluşturuluyor.
                    <div class="flex items-center mb-4">
                    <input asp-for="AutoGenerateWeeks" type="checkbox" class="h-4 w-4 bg-gray-600 border-gray-500 rounded text-blue-600 focus:ring-blue-500" />
                    <label asp-for="AutoGenerateWeeks" class="ml-2 block text-sm text-gray-300 font-medium"></label>
                    </div>
                    <small class="text-gray-400 text-xs -mt-3 mb-3 block">İşaretli ise, lig başlangıç ve bitiş tarihlerine göre haftalar otomatik olarak dağıtılır.</small>
                    *@

                        <div class="flex justify-end space-x-3 pt-3">
                            @if (dashboardController != null)
                            {
                                <a asp-action="Dashboard" asp-controller="@dashboardController"
                                   class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-500 transition duration-150">
                                    İptal
                                </a>
                            }

                            <button type="submit" id="generateFixtureSubmitButton" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition duration-150">
                                Fikstürü Oluştur ve Kaydet
                            </button>
                        </div>
                    </form>
                }
            </section>
        </div>

        <div class="md:col-span-1">
            <section class="bg-gray-700 p-4 rounded-md">
                <h4 class="text-xl font-medium text-white mb-3">Şehirdeki Takımlar (@Model.Teams.Count)</h4>
                @if (Model.Teams.Any())
                {
                    <ul class="space-y-2 max-h-96 overflow-y-auto">
                        @foreach (var team in Model.Teams.OrderBy(t => t.Name))
                        {
                            <li class="flex items-center bg-gray-600 p-2 rounded-md">
                                @if (!string.IsNullOrEmpty(team.LogoUrl))
                                {
                                    <img src="@team.LogoUrl" alt="@team.Name Logosu" class="w-8 h-8 rounded-full mr-3 object-cover flex-shrink-0" />
                                }
                                else
                                {
                                    <span class="w-8 h-8 rounded-full mr-3 bg-gray-500 flex items-center justify-center text-white font-bold flex-shrink-0">@team.Name.FirstOrDefault()</span>
                                }
                                <span class="text-gray-200 truncate">@team.Name</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p class="text-gray-400">Bu şehir için kayıtlı takım bulunmuyor.</p>
                }
            </section>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const teamCheckboxes = document.querySelectorAll('input[name="SelectedTeamIds"]');
            const selectedTeamCountSpan = document.getElementById('selectedTeamCount');
            const teamSearchInput = document.getElementById('teamSearchInput');
            const teamListContainer = document.getElementById('teamListContainer');
            const allTeamItems = Array.from(teamListContainer.querySelectorAll('.team-item'));
            const numberOfGroupsInput = document.getElementById('NumberOfGroups');
            const groupTeamValidationMessage = document.getElementById('groupTeamValidationMessage');
            const submitButton = document.getElementById('generateFixtureSubmitButton');

            function updateSelectedTeamCount() {
                const count = Array.from(teamCheckboxes).filter(cb => cb.checked).length;
                selectedTeamCountSpan.textContent = count;
                validateTeamAndGroupCounts(); // Takım sayısı değiştiğinde validasyonu tetikle
            }

            function filterTeams() {
                const searchTerm = teamSearchInput.value.toLowerCase();
                allTeamItems.forEach(function(item) {
                    const teamNameLabel = item.querySelector('.team-name');
                    if (teamNameLabel) {
                        const teamName = teamNameLabel.textContent.toLowerCase();
                        if (teamName.includes(searchTerm)) {
                            item.style.display = 'flex';
                        } else {
                            item.style.display = 'none';
                        }
                    }
                });
            }

            function validateTeamAndGroupCounts() {
                if (!numberOfGroupsInput || !groupTeamValidationMessage || !submitButton) return;

                const selectedTeams = Array.from(teamCheckboxes).filter(cb => cb.checked).length;
                const groups = parseInt(numberOfGroupsInput.value, 10);

                let isValid = true;
                groupTeamValidationMessage.style.display = 'none';
                groupTeamValidationMessage.textContent = '';

                if (groups > 1 && selectedTeams > 0) {
                    if (selectedTeams < groups) {
                        groupTeamValidationMessage.textContent = 'Seçilen takım sayısı, grup sayısından az olamaz.';
                        groupTeamValidationMessage.style.display = 'block';
                        isValid = false;
                    } else if (selectedTeams % groups !== 0) {
                        groupTeamValidationMessage.textContent = 'Seçilen takım sayısı, grup sayısına tam bölünmelidir.';
                        groupTeamValidationMessage.style.display = 'block';
                        isValid = false;
                    }
                }
                
                // Formdaki diğer validasyonlar da geçerliyse submit butonu aktif/pasif edilebilir.
                // Şimdilik sadece bu validasyona göre bir kısıtlama koymuyoruz, sadece mesaj gösteriyoruz.
                // İstenirse: submitButton.disabled = !isValid;
            }

            teamCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectedTeamCount);
            });

            if (teamSearchInput) {
                teamSearchInput.addEventListener('input', filterTeams);
            }

            if (numberOfGroupsInput) {
                numberOfGroupsInput.addEventListener('input', validateTeamAndGroupCounts);
            }

            // Initial calls
            updateSelectedTeamCount();
            if (teamSearchInput) { // Ensure it exists before calling filterTeams
                 filterTeams();
            }
            validateTeamAndGroupCounts(); // Sayfa yüklendiğinde de kontrol et
        });

        // Checkbox işaretlenmezse false gitmesi için bir event listener eklenebilir, ama hidden field daha basit.
        // Örneğin:
        // document.getElementById('PlayReturnMatches').addEventListener('change', function() {
        //     this.nextElementSibling.value = this.checked ? "true" : "false";
        // });
        // Ancak ASP.NET Core'da checkbox'lar için bu genellikle otomatik yönetilir (işaretlenmezse false, işaretlenirse true).
        // Yine de bir hidden field ile garantiye almakta fayda var, özellikle model bindingde sorun yaşamamak için.
        // Yukarıdaki formda `value="true"` ve sonra `value="false"` olan hidden input ekledim.
        // Bu, checkbox işaretlenmediğinde 'false' değerinin gönderilmesini sağlar.
        // Ancak, checkbox'lar için standart model bağlama genellikle şöyledir:
        // Eğer `PlayReturnMatches` checkbox'ı işaretlenirse, formda `PlayReturnMatches=true` gönderilir.
        // Eğer işaretlenmezse, `PlayReturnMatches` için hiçbir değer gönderilmez ve modeldeki bool özelliği varsayılan değerini (genellikle false) alır.
        // Bu yüzden rövanş için eklediğim ikinci hidden input'u (name="PlayReturnMatches" value="false") kaldırdım.
        // Controller'da bool `PlayReturnMatches` özelliği işaretlenmediğinde `false` olacaktır.
        // Mevcut kodda PlayReturnMatches için hidden input bulunmaktadır, bu yorum satırı eski bir duruma işaret ediyor olabilir.
        // Kodun mevcut hali (checkbox + aynı isimde hidden input) boole alanların doğru post edilmesi için yaygın bir yöntemdir.
    </script>
}
 